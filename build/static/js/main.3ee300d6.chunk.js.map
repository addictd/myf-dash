{"version":3,"sources":["logo.svg","components/dashboard/dashboard.js","components/test/test.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Chart","Component","require","getRandomColor","color","i","Math","floor","random","Dashboard","props","componentDidMount","ctx","document","getElementById","_colors","map","item","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","legend","position","fontColor","fontFamily","usePointStyle","padding","className","key","style","height","role","width","aria-valuenow","aria-valuemin","aria-valuemax","id","href","scope","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3ee300d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\nimport './dashboard.scss';\nimport Alert from 'react-bootstrap/Alert';\n\nvar Chart = require('chart.js');\n\n\nfunction getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\n\n\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n    componentDidMount = () => {\n        var ctx = document.getElementById('myChart');\n        const options = {\n            legend : {\n                position : 'bottom',\n                labels: {\n                    fontColor: 'black',\n                    fontFamily: \"Averin\",\n                    usePointStyle\t : true,\n                    padding : 20\n                }\n            }\n            // scales: {\n            //     yAxes: [{\n            //         ticks: {\n            //             beginAtZero: true\n            //         }\n            //     }]\n            // }\n        };\n        const _colors =  ['','','','','',''].map((item) => getRandomColor());\n        const data = {\n            labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n            datasets: [{\n                label: '# of Votes',\n                data: [12, 19, 3, 5, 2, 3],\n                backgroundColor: _colors,\n                borderColor: ['grey','grey','grey','grey','grey','grey'],\n                borderWidth: 1\n            }]\n        };\n        var myDoughnutChart = new Chart(ctx, {\n            type: 'doughnut',\n            data: data,\n            options: options\n        });\n    }\n\n\n    render() {\n        return <div className=\"dashboard-wrapper\">\n            <div className=\"dashboard-body\">\n                <div className=\"user-intro\">\n                    <h3>Welcome, Priyanka</h3>\n                </div>\n                <div className=\"section1-wrapper\">\n                    <div className=\"tripstats-wrapper\">\n                        <div className=\"tripstats-header\">\n                            <h4>Trip Stats</h4>\n\n                            <div className='filter'>\n                                {\n                                    ['Today', 'Week', 'Month', 'Custom'].map((item, i) => {\n                                        return <button key={item} type=\"button\" className=\"btn btn-light\">{item}</button>\n                                    })\n                                }\n                            </div>\n                        </div>\n                        <div className=\"tripstats-body\">\n                            {['Total Bookings', 'Manager Approval', 'Vendor Unassigned', 'Driver Unassigned', 'Dispatched',\n                                'Cab Arrived', 'Start Trip Live', 'End Trip', 'Close Duty', 'Bill Approval', 'Invoice Generations',\n                                'Cancelled', 'SOS(emergency)', 'View More'].map((item, i) => {\n                                    return <div className=\"card\"\n                                    // style=\"width: 18rem;\"\n                                    >\n                                        {/* <img src=\"...\" className=\"card-img-top\" alt=\"...\" /> */}\n                                        <div className=\"card-body\">\n                                            <h3 className=\"header-number\">100</h3>\n                                            <h7 className=\"card-title header-text\">{item}</h7>\n                                            {/* <p className=\"card-text\">Some quick example text to build on the card title and make\n                                         up the bulk of the card's content.</p> */}\n                                            {/* <a href=\"#\" className=\"btn btn-primary\">Go somewhere</a> */}\n                                            <div className=\"progress header-progress\" style={{ height: \".2rem\" }}>\n                                                <div className=\"progress-bar\" role=\"progressbar\" style={{ width: \"50%\", backgroundColor : getRandomColor() }} aria-valuenow=\"60\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                                            </div>\n                                        </div>\n                                    </div>;\n                                })}\n                        </div>\n\n                    </div>\n                </div>\n                <div className=\"section2-wrapper\">\n\n                    <div className=\"bookingstat-wrapper section2-common\">\n                        <div className=\"bookingstat-body\">\n                            <h4>Booking Stats</h4>\n                            <div className=\"card\">\n                                {/* <img src=\"...\" className=\"card-img-top\" alt=\"...\" /> */}\n                                <div className=\"bookingstat-chart\">\n                                    <canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>\n                                </div>\n                                {/* <div className=\"card-body\">\n                                    <h5 className=\"card-title\">booking stats</h5>\n                                    <p className=\"card-text\">Ahoy! Stop staring at me.</p>\n                                    <a href=\"#\" className=\"btn btn-primary\">Ninja world</a>\n                                </div> */}\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"livemonitoring-wrapper section2-common\">\n\n                        <div className=\"livemonitoring-body\">\n                            <h4>Live Monitoring</h4>\n                            <div className=\"card\" >\n                                {/* <img src=\"...\" className=\"card-img-top\" alt=\"...\" /> */}\n                                <div className=\"card-body\">\n                                    <h5 className=\"card-title\">Live Monitoring</h5>\n                                    <p className=\"card-text\">Ahoy! Stop staring at me.</p>\n                                    <a href=\"#\" className=\"btn btn-primary\">Ninja world</a>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n                <div className=\"section3-wrapper\">\n                    <h4>Vehicle Overspeeding Stats</h4>\n                    <div className=\"section3-body\">\n\n\n                        {['Total Speed Violation', 'Resolved Speed Violation', 'Pending Speed Violation'].map((item, i) => {\n                            return <div className=\"card\">\n                                {/* <img src=\"...\" className=\"card-img-top\" alt=\"...\" /> */}\n                                <div className=\"card-body content\">\n                                    <div className=\"icon\">\n                                        <i className=\"fa fa-cloud\"></i>\n                                    </div>\n                                    <div className=\"content-data\">\n                                        <h3>100</h3>\n                                        <p>{item}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        })}\n                    </div>\n\n                </div>\n\n                <div className=\"section4-wrapper\">\n                    {/* <h4>Table stats</h4> */}\n                    <div className=\"section4-body\">\n                        <div className='card'>\n\n                            <table className=\"table\">\n                                <thead>\n                                    <tr>\n                                        {['Speed Graph',\n                                            'TRN',\n                                            'Vendor',\n                                            'Traveller',\n                                            'Driver',\n                                            'Car No.',\n                                            'Date & Time',\n                                            'Action'].map((item, i) => {\n                                                return <th scope=\"col\">{item}</th>\n                                            })}\n\n                                        {/* <th scope=\"col\">First</th>\n                                    <th scope=\"col\">Last</th>\n                                    <th scope=\"col\">Handle</th> */}\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        ['', '', '', '', '', '', '', ''].map((item, i) => {\n                                            return <tr>\n                                                {[' ', 'AB002', 'Chinku', 'Pinku', 'Sofia', 'UP 00007', '12th Nov 89', 'Resolve'].map((item, i) => {\n                                                    return <td>{item}</td>;\n                                                })}\n                                            </tr>\n                                        })\n                                    }\n\n                                </tbody>\n                            </table>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>;\n    }\n}\n\nexport default Dashboard;","import React , {Component} from 'react';\nimport './test.scss';\nimport Alert from 'react-bootstrap/Alert';\n\nclass TestComponent extends Component{\n    constructor(props){\n        super(props);\n\n    }\n\n\n    render(){\n        return <div className=\"test-wrapper\">\n            'hello bug'\n            {\n                [\n                    'primary',\n                    'secondary',\n                    'success',\n                    'danger',\n                    'warning',\n                    'info',\n                    'light',\n                    'dark',\n                    ].map((variant, idx) => (\n                    <Alert key={idx} variant={variant}>\n                        This is a {variant} alert—check it out!\n                    </Alert>\n                    ))\n            }\n        </div>;\n    }\n}\n\nexport default TestComponent;","import React from 'react';\nimport logo from './logo.svg';\nimport TestComponent from './components/test/test';\nimport Dashboard from './components/dashboard/dashboard';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <TestComponent /> */}\n        <Dashboard />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';// bootstrap css\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}